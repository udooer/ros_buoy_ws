// Generated by gencpp from file ntu_msgs/HydrophoneData.msg
// DO NOT EDIT!


#ifndef NTU_MSGS_MESSAGE_HYDROPHONEDATA_H
#define NTU_MSGS_MESSAGE_HYDROPHONEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ntu_msgs
{
template <class ContainerAllocator>
struct HydrophoneData_
{
  typedef HydrophoneData_<ContainerAllocator> Type;

  HydrophoneData_()
    : header()
    , data_ch1()
    , data_ch2()
    , data_ch3()
    , data_ch4()
    , length(0)
    , fs(0)
    , bits(0)
    , data_type()  {
    }
  HydrophoneData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , data_ch1(_alloc)
    , data_ch2(_alloc)
    , data_ch3(_alloc)
    , data_ch4(_alloc)
    , length(0)
    , fs(0)
    , bits(0)
    , data_type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _data_ch1_type;
  _data_ch1_type data_ch1;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _data_ch2_type;
  _data_ch2_type data_ch2;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _data_ch3_type;
  _data_ch3_type data_ch3;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _data_ch4_type;
  _data_ch4_type data_ch4;

   typedef int32_t _length_type;
  _length_type length;

   typedef int32_t _fs_type;
  _fs_type fs;

   typedef int32_t _bits_type;
  _bits_type bits;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type_type;
  _data_type_type data_type;





  typedef boost::shared_ptr< ::ntu_msgs::HydrophoneData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ntu_msgs::HydrophoneData_<ContainerAllocator> const> ConstPtr;

}; // struct HydrophoneData_

typedef ::ntu_msgs::HydrophoneData_<std::allocator<void> > HydrophoneData;

typedef boost::shared_ptr< ::ntu_msgs::HydrophoneData > HydrophoneDataPtr;
typedef boost::shared_ptr< ::ntu_msgs::HydrophoneData const> HydrophoneDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ntu_msgs::HydrophoneData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ntu_msgs::HydrophoneData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ntu_msgs::HydrophoneData_<ContainerAllocator1> & lhs, const ::ntu_msgs::HydrophoneData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.data_ch1 == rhs.data_ch1 &&
    lhs.data_ch2 == rhs.data_ch2 &&
    lhs.data_ch3 == rhs.data_ch3 &&
    lhs.data_ch4 == rhs.data_ch4 &&
    lhs.length == rhs.length &&
    lhs.fs == rhs.fs &&
    lhs.bits == rhs.bits &&
    lhs.data_type == rhs.data_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ntu_msgs::HydrophoneData_<ContainerAllocator1> & lhs, const ::ntu_msgs::HydrophoneData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ntu_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ntu_msgs::HydrophoneData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ntu_msgs::HydrophoneData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ntu_msgs::HydrophoneData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ntu_msgs::HydrophoneData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ntu_msgs::HydrophoneData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ntu_msgs::HydrophoneData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ntu_msgs::HydrophoneData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7632af3f7726d3fc3bf79582f66f89c";
  }

  static const char* value(const ::ntu_msgs::HydrophoneData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7632af3f7726d3fULL;
  static const uint64_t static_value2 = 0xc3bf79582f66f89cULL;
};

template<class ContainerAllocator>
struct DataType< ::ntu_msgs::HydrophoneData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ntu_msgs/HydrophoneData";
  }

  static const char* value(const ::ntu_msgs::HydrophoneData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ntu_msgs::HydrophoneData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32[] data_ch1\n"
"int32[] data_ch2\n"
"int32[] data_ch3\n"
"int32[] data_ch4\n"
"int32 length\n"
"int32 fs\n"
"int32 bits\n"
"string data_type\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ntu_msgs::HydrophoneData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ntu_msgs::HydrophoneData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.data_ch1);
      stream.next(m.data_ch2);
      stream.next(m.data_ch3);
      stream.next(m.data_ch4);
      stream.next(m.length);
      stream.next(m.fs);
      stream.next(m.bits);
      stream.next(m.data_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HydrophoneData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ntu_msgs::HydrophoneData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ntu_msgs::HydrophoneData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "data_ch1[]" << std::endl;
    for (size_t i = 0; i < v.data_ch1.size(); ++i)
    {
      s << indent << "  data_ch1[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.data_ch1[i]);
    }
    s << indent << "data_ch2[]" << std::endl;
    for (size_t i = 0; i < v.data_ch2.size(); ++i)
    {
      s << indent << "  data_ch2[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.data_ch2[i]);
    }
    s << indent << "data_ch3[]" << std::endl;
    for (size_t i = 0; i < v.data_ch3.size(); ++i)
    {
      s << indent << "  data_ch3[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.data_ch3[i]);
    }
    s << indent << "data_ch4[]" << std::endl;
    for (size_t i = 0; i < v.data_ch4.size(); ++i)
    {
      s << indent << "  data_ch4[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.data_ch4[i]);
    }
    s << indent << "length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.length);
    s << indent << "fs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fs);
    s << indent << "bits: ";
    Printer<int32_t>::stream(s, indent + "  ", v.bits);
    s << indent << "data_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NTU_MSGS_MESSAGE_HYDROPHONEDATA_H
